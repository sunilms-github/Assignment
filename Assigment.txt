1) Write a program that prints the following:
2
4
6
8
10

object Assigment {
  def main(args: Array[String]): Unit = {
    for(i <- 1 to 10 by 2)
      {
        println(i+1)
      }
  }
}

def num(n:Int)={
for(i<-1 to n by 2){
println(i+1)
}
}

2) Write a program that invokes a function to do the above.

def num(n:Int)={
for(i<-1 to n by 2){
println(i+1)
}
}

3) Write a program that sums up 10 numbers starting from the number given by the user and
returns the same.

object Assigment{
  def main(args: Array[String]): Unit = {
    var sum :Int =0
    for(i <- 1 to 10){
      sum=sum+i
    }
    println("sum of number is :"+sum)
  }
}

def sumNum(n:Int)={
 var sum:Int=0
 for(i <- 1 to n){
 sum=i+sum}
 println("Sum of number is :"+sum)
 }
 
4) Write the output generated by the snippet
var x = 10
while (x <= 10 )
{
if (x <= 5 )
println (x)
x = x + 1
}

Condition false No Out put

5) Display the count of numbers between 1 and 100 not divisible by 2, 3 and 5.

object Assigment{
  def main(args: Array[String]): Unit = {
    var cnt:Int=0
    for(i <- 1 to 100){
     if((i%2!=0) && (i%3!=0) && (i%5!=0)){
       cnt=cnt+1
     }
   }
    println(cnt)
  }
}

def count(n:Int)={
var cnt: Int=0
for(i<- 1 to n){
if((i%2!=0) && (i%3!=0) && (i%5!=0)){
cnt=cnt+1
}
}
println(cnt)
} 


6.Display Nth prime number within the range of 1 to 1000 numbers.
object Demo
{
	def main(args: Array[String])
	{
		var a=0
		for(i<-1 to 1000)
		{
			if((i%2!=0) && (i%3!=0) && (i%5!=0) && (i%7!=0))
			{
				a=i
			}
		}
	println(a)
	}
}

def primeNumber(n:Int)={
var a=0
for(i<-1 to n){
if((i%2!=0) && (i%3!=0) && (i%5!=0) && (i%7!=0)){
a=i }
}
println("N th prime number is :"+a)
}

7) Implement Scala code to print the following pattern:
* * * * * * * *
* * * * * *
* * * *
* *
*

object Assigment
{
def main(args: Array[String]): Unit = {
    var noOf =10
    var blankSpace = " "
    for (r <- 1 to 10)
    {
      blankSpace = blankSpace + " "
      println()
      print(blankSpace)
      for (i <- 1 to noOf )
        print(" * ")
      noOf = noOf - 1
    }

  }
}

8) Create a function named “getAgeCategory” which classifies the age based on the following rules and returns a category.
age < 10 - kid
age between 10 and 20 – teen
age between 20 and 60 – adult
age greater than 60 – old age

def age(n:Int)={
if(n<10){println("KID")} else if(n<=60) {
println("Adult")} else {println("Old age")}
}

9) Consider an array of strings say Array("scala","spark","functional","immutability","wonderful"). Now generate an array of uppercase strings as output for those which contain a character ‘l’ and whose length is greater than 7.

val a= Array("scala","spark","functional","immutability","wonderful")

10) Write a class that has two properties along with the following methods:
add
subtract
multiplication
modulus
Invoke each method to return appropriate results.

11) Create a class for storing employee attributes like empid, empname, deptid, basicsalary and
expose a method for computing gross salary where,
grosssalary = basicsalary + hra (30% of basic) + da (10% of basic)
and expose one more method to display all the attributes of an employee.

class Emp{
  def details(empid:Int,ename:String,basicSalary:Double ): Unit ={
    println("Employee ID :" +empid )
    println("Employee Name :" +ename)
    println("basic salary is :" +basicSalary)
  }
  def grassSal(basicSalary:Double): Unit ={
        var grassSalary = basicSalary+basicSalary*0.3+basicSalary*0.1
      println("Grass salary is :"+grassSalary)
  }
}

object EmpDetails{
  def main(args: Array[String]): Unit = {
    val obj= new Emp
    obj.details(101,"Sunil",10000)
    obj.grassSal(10000)
  }
}

12) Create a class for performing arithmetic operations by exposing different methods for different
operations like add, subtract, multiply, avg, min, max, displayEven (consider three numbers as input)
Note: Find max, min using if & else as well as match expression.

def addNum(a:Int,b:Int){println(a+b)}
def subNum(a:Int,b:Int){println(a+b)}
------------------------------------------
class Arthmetic{
  val a=20
  val b=10
  def addNum(): Unit ={
    println("Addition of (a+b) :"+(a+b))
  }
  def subNum(): Unit ={
    println("Substract  of (a-b) :"+(a-b))
  }
  def mulNum(): Unit ={
    println("Addition of (a*b) :"+(a*b))
  }
  def avgNum(): Unit ={
    println("Addition of (a+b) :" +((a+b)/2))
  }
  def max(): Unit ={
    if (a>b){
      println("Max number is :"+a)
    }
    else{
      println("Max number is :"+b)
    }
  }
  def min(): Unit ={
    if (a<b){
      println("Min number is :"+a)
    }
    else{
      println("Min number is :"+b)
    }
  }
}

object Opareter{
  def main(args: Array[String]): Unit = {
    val obj= new Arthmetic
    obj.addNum()
    obj.subNum()
    obj.mulNum()
    obj.avgNum()
      obj.max()
    obj.min()
  }
}
  
-------------------------------------------------
 val num = a>b match{ 
 case true => println("max is :"+a)
 case false => println("max is :"+b)
 }
 
 val num = a<b match{ 
 case true => println("max is :"+a)
 case false => println("max is :"+b)
 }


13) Print all possible 3-digit numbers with combinations of 1, 2 and 3.



111
112
113
121
122
123
211
212
213
221
222
223
231
232
233


------------------------------------------------------
assignmets:-2

1)Impliment case insensitive wordcount using scala collection by reading data from a file 

scala> Source.fromFile("/home/cloudera/Desktop/sourcefile.txt")
scala> val agLine=Source.fromFile("/home/cloudera/Desktop/sourcefile.txt").getLines
scala> val agLineList=Source.fromFile("/home/cloudera/Desktop/sourcefile.txt").getLines.toList
scala> val agWords=agLineList.map(t=>t.split(" "))
scala> val agWordsSg=agLineList.flatMap(t=>t.split(" "))
scala> val agWordsGp=agWordsSg.groupBy(t=>t.toLowerCase)
scala> val agwordsCnt=agWordsGp.map(t=>(t._1,t._2.size))
scala> agwordsCnt.foreach(println)

2)Impliment scala program to find total number of words in a file 

scala> Source.fromFile("/home/cloudera/Desktop/sourcefile.txt")
scala> val agLine=Source.fromFile("/home/cloudera/Desktop/sourcefile.txt").getLines
scala> val agLineList=Source.fromFile("/home/cloudera/Desktop/sourcefile.txt").getLines.toList
scala> val agWords=agLineList.map(t=>t.split(" "))
scala> val agWordsSg=agLineList.flatMap(t=>t.split(" "))
scala> val agWordsGp=agWordsSg.groupBy(t=>t.toLowerCase)
scala> val agWordsCnt1=agWordsGp.map(t=>(t._2.size))
scala> val agWordCnt2=agWordsCnt1.reduce((w1,w2)=>w1 + w2)

-------------------------------------------------------------------------------------------------
assigmnet:-3

Find the total amount each customer spend 

Input:- 

TransactionId,CustomerID,ItemID,price
111,1,111,400.00
112,2,123,500.00
133,1,444,600.55
144,1,555,160.55
155,6,455,256.56
166,7,466,246.34
177,8,234,344.45
155,7,268,355.78
122,8,567,256.34
245,7,345,660.35
345.7,334,643.56


scala> val orders=Source.fromFile("/home/cloudera/Desktop/containt.txt").getLines().toList
scala> val OrderMap=orders.map(rec=>{val o=rec.split(",") ;( o(1),o(3).toDouble)})
scala> val groupOrder=OrderMap.groupBy(t=>(t._1)).mapValues(q=>q.map(r=>r._2).sum)

-----------------------------------------------------------------------------------------------------

Assigment :-3

1) Find out whether a list passed as input is a palindrome or not.
Ex: List(1, 2, 3, 2, 1) is a palindrome

object Prg1
{
	def main(args: Array[String])
	{
		val str:String="1,2,3,2,3"
		if(str==str.reverse)
		{
			println("palindrome")
		}else
		 {
			println("Not a palidrome")
		  }
	}
}


def(str:String):Unil ={
	if(str==str.reverse)
	{
       	println("palindrome")
	} else
	 {
	   println("Not a palidrome")
	  }
}

2) Remove the Kth element from a list.
Return the list and the removed element in a Tuple. Elements are numbered from 0.

3) Write a function countdown(n: Int) that prints the numbers from n to 0.

def countdown(n:Int):Unit={
for(i <- 1 to n reverse)
{
println(i)
}
}

4) Write a function minmax(values: Array[Int]) that returns a pair containing the
smallest and largest values in the array.

scala> def getMinAndMaxValue(array:Array[Int])= {
     | (array.min, array.max) }

5) Write a function lteqgt(values: Array[Int], v: Int) that returns a triple(tuple with 3 fields) containing
the counts of values less than v , equal to v , and greater than v .

scala> def lteqgt(array: Array[Int],v:Int) =(array.count(_<v),array.count(_==v),array.count(_>v))
lteqgt: (array: Array[Int], v: Int)(Int, Int, Int)

scala> lteqgt(Array(12,34,45,32,34,34,63,64,75),34)
res15: (Int, Int, Int) = (2,3,4)



6) Extend the following BankAccount class to a CheckingAccount class that charges $1
for every deposit and withdrawal.
class BankAccount(initialBalance: Double) {
private var balance = initialBalance
def deposit(amount: Double) = { balance += amount; balance }
def withdraw(amount: Double) = { balance -= amount; balance }
}


package Asiggment

import java.time.temporal.TemporalAmount

class CheckAccount(intialbalance:Double){
  private var vbalance=intialbalance
  def deposit(amount:Double) ={
    vbalance += amount
    vbalance
  }

  def withdraw(amount:Double):Double = {
    vbalance -=amount
    vbalance
  }

  def balance()=println(vbalance)
}

class CheckAccountBalance(intialbalance:Double,val charges:Double) extends CheckAccount(intialbalance:Double)
{
  override def deposit(amount: Double): Double = super.deposit(amount-charges)

  override def withdraw(amount: Double): Double = super.withdraw(amount-charges)
}

object BankQuation {
  def main(args: Array[String]): Unit = {
    println("Bank account Balance details")
    val obj= new CheckAccountBalance(10000,1)
    obj.deposit(1000)
    obj.balance()
  }
}



7) Extend the BankAccount class of the preceding exercise into a class SavingsAccount
that earns interest every month (when a method earnMonthlyInterest is called)
and has three free deposits or withdrawals every month. Reset the transaction
count in the earnMonthlyInterest method.

8) Write a Scala code snippet that reverses the lines in a file (making the last
line the first one, and so on).

9) Write a Scala code snippet that reads a file and prints all words with more
than 12 characters to the console.